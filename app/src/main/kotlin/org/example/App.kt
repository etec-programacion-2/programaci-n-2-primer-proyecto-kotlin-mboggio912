/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
fun factorial(n: Int): Int {
    return if (n <= 1) 1 else n * factorial(n - 1)
}
fun potencia(n: Int, b: Int) {
    var resultado = b
    for (i in 2..n) {
      resultado = resultado * b
    } 
    println (resultado)
    
}
fun saludar(nombre: String, edad: Int = 0) {
    println("Hola $nombre, tienes $edad años")
}
fun mostrarNumerosConLoopspares() {
    // Usando for
    println("Usando for:")
    for (i in 2..20) {
        if (i % 2 == 0) {
            println(i)
        }  
    }
    
    // Usando while
    println("\nUsando while:")
    var j = 2
    while (j <= 20) {
        if (j % 2 == 0) {
            println(j)
        } 
        j++
    }
    
    // Usando do-while
    println("\nUsando do-while:")
    var k = 2
    do {
        println(k)
        k = k + 2
    } while (k <= 20)
}
fun mostrarNumerosConLoops() {
    // Usando for
    println("Usando for:")
    for (i in 1..10) {
        println(i)
    }
    
    // Usando while
    println("\nUsando while:")
    var j = 1
    while (j <= 10) {
        println(j)
        j++
    }
    
    // Usando do-while
    println("\nUsando do-while:")
    var k = 1
    do {
        println(k)
        k++
    } while (k <= 10)
}

fun esParOImpar(numero: Int): String {
    return when {
        numero % 2 == 0 -> "Par"
        else -> "Impar"
    }
}
fun positivonegativocero(numero: Int) {
    if (numero > 0) {
        println("positivo")
    } else {
        if (numero < 0) {
            println("negativo")
        } else {
            println(0)
        }
    }
}

fun rectangulo() {
    val base: Double = 20.5
    val altura: Double = 14.5
    val area: Double = base*altura
    println("$area")
}
fun nombre(){
    val nombre: String = "mateo"
    val fecha: Double = 22.04
    val años: Int = 16
    val esEstudiante: Boolean = true
    println("$nombre, $fecha, $años, $esEstudiante")
}
fun main() {
    nombre()
    rectangulo()
    val numero = 10
    println(esParOImpar(numero))
    positivonegativocero(numero)
    mostrarNumerosConLoops()
    mostrarNumerosConLoopspares()
    potencia (2,6)
}
    


